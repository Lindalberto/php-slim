<?php
/**
 * Created by PhpStorm.
 * User: LindalbertoFilho
 * Date: 19/11/2018
 * Time: 22:50
 */

namespace Src\Main;



use Slim\App;

class Project extends App
{

    public function __construct()
    {
        /**
         * Quaquer dependência pode ser definida por meio da adiação de uma nova chave
         * Ex: 'chave' => function($c) {
         *  lógica
         *  return resultado;
         * }
         */
        parent::__construct([
            'settings' => $this->settings(),
            'renderer' => function ($c) {
                $settings = $c->get('settings')['renderer'];
                return new \Slim\Views\PhpRenderer($settings['template_path']);
            },
            'logger' => function ($c) {
                $settings = $c->get('settings')['logger'];
                $logger = new \Monolog\Logger($settings['name']);
                $logger->pushProcessor(new \Monolog\Processor\UidProcessor());
                $logger->pushHandler(new \Monolog\Handler\StreamHandler($settings['path'], $settings['level']));
                return $logger;
            }
        ]);
    }

    public function run($silent = false)
    {
        $routes = new Routes;
        $routes($this);

        return parent::run($silent); // TODO: Change the autogenerated stub
    }

    private function settings()
    {
        return [
            'displayErrorDetails' => 'production' !== APPLICATION_ENV, // set to false in production
            'addContentLengthHeader' => true, // Allow the web server to send the content-length header
            // Renderer settings
            'renderer' => [
                'template_path' => __DIR__ . '/../../templates/',
            ],
            // Monolog settings
            'logger' => [
                'name' => 'slim-app',
                'path' => isset($_ENV['docker']) ? 'php://stdout' : __DIR__ . '/../logs/app.log',
                'level' => \Monolog\Logger::DEBUG,
            ],
            'db' => [
                'host'     => getenv('DB_HOST'),
                'username' => getenv('DB_USERNAME'),
                'password' => getenv('DB_PASSWORD'),
                'dbname'   => getenv('DB_NAME'),
                'charset'  => getenv('DB_CHARSET')
            ],
        ];
    }
}